Creating a **Password Manager** using **Vanilla JavaScript** involves building an interface where users can:
- Save passwords.
- View stored passwords.
- Generate random secure passwords.
- Delete or copy passwords.

To keep it simple, this project will use local storage to save passwords locally in the browser. Here's a step-by-step guide to building a basic password manager with HTML, CSS, and JavaScript.

### 1. Basic File Structure
You'll need three main files:
- `index.html` for the structure of the page.
- `style.css` for styling the page.
- `app.js` for the logic and behavior.

### 2. `index.html` – Structure

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Password Manager</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="container">
        <h1>Password Manager</h1>

        <!-- Form for Adding Password -->
        <div class="form-container">
            <input type="text" id="website" placeholder="Website" required>
            <input type="text" id="username" placeholder="Username/Email" required>
            <input type="password" id="password" placeholder="Password" required>
            <button id="generatePassword">Generate Password</button>
            <button id="addPassword">Add Password</button>
        </div>

        <!-- Display Passwords -->
        <div class="password-list">
            <h2>Stored Passwords</h2>
            <ul id="passwords"></ul>
        </div>
    </div>

    <script src="app.js"></script>
</body>
</html>
```

### 3. `style.css` – Styling

```css
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: Arial, sans-serif;
    background-color: #f7f7f7;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
}

.container {
    background-color: white;
    padding: 20px;
    border-radius: 10px;
    width: 400px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    text-align: center;
}

h1, h2 {
    margin-bottom: 20px;
}

input {
    width: 90%;
    padding: 10px;
    margin-bottom: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
}

button {
    padding: 10px 15px;
    margin: 10px;
    border: none;
    background-color: #4CAF50;
    color: white;
    cursor: pointer;
    border-radius: 5px;
}

button:hover {
    background-color: #45a049;
}

.password-list {
    margin-top: 20px;
    text-align: left;
}

ul {
    list-style-type: none;
}

li {
    background-color: #e9e9e9;
    padding: 10px;
    margin: 10px 0;
    border-radius: 5px;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.copy-btn {
    background-color: #2196F3;
    color: white;
    border: none;
    padding: 5px;
    cursor: pointer;
    border-radius: 5px;
}

.delete-btn {
    background-color: #f44336;
    color: white;
    border: none;
    padding: 5px;
    cursor: pointer;
    border-radius: 5px;
}
```

### 4. `app.js` – Logic

```js
// Elements
const websiteInput = document.getElementById('website');
const usernameInput = document.getElementById('username');
const passwordInput = document.getElementById('password');
const addPasswordBtn = document.getElementById('addPassword');
const generatePasswordBtn = document.getElementById('generatePassword');
const passwordsList = document.getElementById('passwords');

// Add event listeners
addPasswordBtn.addEventListener('click', addPassword);
generatePasswordBtn.addEventListener('click', generateRandomPassword);

// Load stored passwords from local storage
document.addEventListener('DOMContentLoaded', loadPasswords);

// Function to add password to local storage and list
function addPassword() {
    const website = websiteInput.value;
    const username = usernameInput.value;
    const password = passwordInput.value;

    if (website && username && password) {
        const passwordData = { website, username, password };

        // Get stored passwords from local storage
        let passwords = JSON.parse(localStorage.getItem('passwords')) || [];

        // Add new password data
        passwords.push(passwordData);

        // Save back to local storage
        localStorage.setItem('passwords', JSON.stringify(passwords));

        // Clear inputs
        websiteInput.value = '';
        usernameInput.value = '';
        passwordInput.value = '';

        // Reload the password list
        loadPasswords();
    } else {
        alert('Please fill in all fields!');
    }
}

// Function to load passwords from local storage and display them
function loadPasswords() {
    const passwords = JSON.parse(localStorage.getItem('passwords')) || [];

    // Clear current list
    passwordsList.innerHTML = '';

    // Populate the list
    passwords.forEach((item, index) => {
        const li = document.createElement('li');
        li.innerHTML = `
            <span><strong>${item.website}</strong> - ${item.username} - ${item.password}</span>
            <button class="copy-btn" onclick="copyToClipboard('${item.password}')">Copy</button>
            <button class="delete-btn" onclick="deletePassword(${index})">Delete</button>
        `;
        passwordsList.appendChild(li);
    });
}

// Function to delete a password
function deletePassword(index) {
    let passwords = JSON.parse(localStorage.getItem('passwords')) || [];
    passwords.splice(index, 1);
    localStorage.setItem('passwords', JSON.stringify(passwords));
    loadPasswords();
}

// Function to copy password to clipboard
function copyToClipboard(password) {
    navigator.clipboard.writeText(password).then(() => {
        alert('Password copied to clipboard');
    });
}

// Function to generate a random password
function generateRandomPassword() {
    const charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+";
    let password = "";
    for (let i = 0; i < 12; i++) {
        password += charset.charAt(Math.floor(Math.random() * charset.length));
    }
    passwordInput.value = password;
}
```

### 5. Explanation

1. **HTML Structure**:
   - The form inputs (`website`, `username`, and `password`) allow users to enter the relevant details.
   - Buttons to add a password or generate a random one.
   - A list (`ul`) is used to display saved passwords.

2. **CSS Styling**:
   - The UI is simple but clean, with a focus on easy navigation and visibility of saved passwords.
   - Buttons for generating, copying, and deleting passwords are styled with hover effects.

3. **JavaScript Functionality**:
   - **Add Password**: Saves the website, username, and password data to local storage. If the fields are not filled in, it shows an alert.
   - **Generate Password**: Automatically generates a secure random password and places it in the input field.
   - **Copy to Clipboard**: Allows users to copy the password with a click.
   - **Delete Password**: Removes a specific password from local storage and the displayed list.
   - **Local Storage**: Passwords are saved in the browser's local storage and persist after page reloads.

### 6. Enhancements

- **Encryption**: For real-world scenarios, you could implement encryption (e.g., using the Web Crypto API) to securely store passwords.
- **Authentication**: Add a master password to protect access to the stored passwords.
- **Password Strength Indicator**: Add a visual password strength indicator when generating or entering a password.

With these steps, you’ve built a simple but functional password manager using Vanilla JavaScript! Let me know if you'd like to explore any other features.
